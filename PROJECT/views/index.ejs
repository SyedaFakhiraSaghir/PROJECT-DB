<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* General Styling */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }

        /* Chat Button */
        #chat-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        #chat-button:hover {
            background-color: #0056b3;
        }

        /* Chat Window */
        #chat-window {
            position: fixed;
            bottom: 90px;
            right: 20px;
            width: 300px;
            height: 400px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            display: none; /* Initially hidden */
            flex-direction: column;
            overflow: hidden;
        }

        /* Chat Header */
        #chat-header {
            background-color: #007bff;
            color: white;
            padding: 10px;
            text-align: center;
            font-size: 16px;
            border-bottom: 1px solid #ccc;
        }

        /* Chat Container */
        #chat-container {
            flex: 1;
            background-color: rgb(71, 70, 70);
            color: white;
            padding: 10px;
            overflow-y: auto;
        }

        /* Input Section */
        .input-group {
            border-top: 1px solid #ccc;
            padding: 10px;
        }

        .input-group input {
            border: 1px solid #ccc;
        }

        .input-group .btn {
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
   <!-- Chat Button with Robot Image -->
<button id="chat-button">
    <img src="./img/chatbot.png" alt="Chatbot" style="width: 30px; height: 30px;" />
</button>

    <!-- Chat Window -->
    <div id="chat-window">
        <!-- Chat Header -->
        <div id="chat-header">
            <h5 style="margin: 0;">Chatbot Assistant</h5>
        </div>

        <!-- Chat Container -->
        <div id="chat-container">
            <!-- Chat messages will appear here -->
            <p>Welcome to Chatbot Assistant!</p>
        </div>

        <!-- Input Section -->
        <div class="input-group">
            <input id="textbox" type="text" class="form-control" placeholder="Type your message here..." />
            <div class="input-group-append">
                <button id="sendBtn" type="button" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>

    <script>
        // Get elements
        const chatButton = document.getElementById('chat-button');
        const chatWindow = document.getElementById('chat-window');
        const sendBtn = document.getElementById('sendBtn'); 
        const textbox = document.getElementById('textbox');
        const chatContainer = document.getElementById('chat-container');

        // Toggle chat window visibility
        chatButton.addEventListener('click', () => {
            if (chatWindow.style.display === 'none' || chatWindow.style.display === '') {
                chatWindow.style.display = 'flex';
            } else {
                chatWindow.style.display = 'none';
            }
        });

        var arrOfPossibleResponses = [
        { message: 'what is your name?', response: 'I am a chatbot!' },
        { message: 'what functionalities do you have?', response: 'This website contains 10 modules\n1.User Profile Management\n2.Schedule Management\n3.Notes Management\n4.Quotes Management\n5.Book Suggestion\n6.Health and Fitness Management\n7.Personal Finance Management\n8.Notifications and Reminders\n9.Recipe and Grocery Organizer\n10.Mood Determination' },
        { message: 'give me details about user profile management module', response: 'Maintain user profiles, including personal information, preferences, and settings. Attributes: Name, ID, Email, password, Phone Number' },
        { message: 'give me details about schedule management module', response: 'Allow users to create, edit, and delete events. Attributes: Name, Date, Time, Id, Details, Address, Links' },
        { message: 'give me details about notes management module', response: 'Enable users to create, organize, and search notes. Attributes: Text, Date, Time' },
        { message: 'give me details about quotes management module', response: 'Provide motivational quotes to users. Attributes: Quote, category' },
        { message: 'give me details about book suggestion module', response: 'Suggest books based on user preferences and interests. Attributes: Book, category' },
        { message: 'give me details about health and fitness management module', response: 'Monitor health metrics (water intake, sleep; user input). Provide health tips and allow users to set fitness goals. Attributes: Steps, Workouts, Water Intake, Sleep, Health Tips, Fitness Goals' },
        { message: 'give me details about notifications and reminders module', response: 'Deliver reminders for events, tasks, health activities, finance deadlines, etc. Attributes: alert on Mail' },
        { message: 'give me details about recipe and organizer module', response: 'Save, organize, and search for recipes. Provide meal planning functionality. Attributes: Dish, ingredients, quantity' },
        { message: 'give me details about mood determination module', response: 'Shows icons and allows user to select how they feel. Shows a weekly history of usersâ€™ mood. Attributes: Mood icons, weekly mood history, date' },
        { message: 'give me details about personal finance management module', response: 'Track income, expenses, and budgets. Attributes: income categories, expense categories, summary (graphs and charts), access control.' }
    ];

        // Function to display user's message
        function sendMessage(text) {
            const messageElement = document.createElement('div');
            messageElement.style.textAlign = 'right';
            messageElement.style.margin = "10px";
            messageElement.innerHTML = `<span><strong>You:</strong> </span><span>${text}</span>`;
            chatContainer.appendChild(messageElement);
            chatContainer.scrollTop = chatContainer.scrollHeight; // Auto-scroll to bottom
        }

        // Function to generate chatbot response
        function chatbotResponse(text) {
            let chatbotResponse = "Sorry, I don't understand."; // Default response

            if (text.toLowerCase() === "hi" || text.toLowerCase() === "hello") {
                chatbotResponse = "Hello!";
            } else {
                const result = arrOfPossibleResponses.find(val => val.message.includes(text.toLowerCase()));
                if (result) chatbotResponse = result.response;
            }

            const messageElement = document.createElement('div');
            messageElement.style.textAlign = 'left';
            messageElement.style.margin = "10px";
            messageElement.innerHTML = `<span><strong>Chatbot:</strong> </span><span>${chatbotResponse}</span>`;

            setTimeout(() => {
                chatContainer.appendChild(messageElement);
                saveToDatabase(text, chatbotResponse); // Save data to backend
            }, 1000);

            chatContainer.scrollTop = chatContainer.scrollHeight; // Auto-scroll to bottom
        }

        // Function to save message data to backend
        function saveToDatabase(userMessage, chatbotResponse) {
            fetch('http://localhost:3001/saveMessage', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    user_message: userMessage,
                    chatbot_response: chatbotResponse,
                }),
            })
            .then(response => response.json())
            .then(data => console.log('Success:', data))
            .catch(error => console.error('Error:', error));
        }

        // Event listener for the send button
        sendBtn.addEventListener('click', () => {
            const text = textbox.value.trim();

            if (!text) {
                alert('Please write something in the message box');
            } else {
                sendMessage(text);        // Display user's message
                chatbotResponse(text);    // Generate chatbot response
                textbox.value = "";       // Clear input field
            }
        });
    </script>
</body>
</html>
